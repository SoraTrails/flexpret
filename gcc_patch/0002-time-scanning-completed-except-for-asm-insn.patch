From b2fab44d87f8ae4a9362b30ee92dba569811fa6b Mon Sep 17 00:00:00 2001
From: SoraTrails <me876657621@126.com>
Date: Wed, 7 Apr 2021 23:13:52 +0800
Subject: [PATCH 2/7] time scanning completed except for asm insn

---
 gcc/final.c    |  19 +++++
 gcc/mtfd.c     | 247 +++++++++++++++++++++++++++++++++++++++------------------
 gcc/mtfd.h     | 145 +++++++++++++++++++++++++++++++++
 gcc/passes.def |   2 +-
 4 files changed, 334 insertions(+), 79 deletions(-)
 create mode 100644 gcc/mtfd.h

diff --git a/gcc/final.c b/gcc/final.c
index 83abee2..9ec4376 100644
--- a/gcc/final.c
+++ b/gcc/final.c
@@ -81,6 +81,10 @@ along with GCC; see the file COPYING3.  If not see
 #include "tree-pretty-print.h" /* for dump_function_header */
 #include "asan.h"
 
+#include "mtfd.h"
+hash_table <rv32i_tmpl_hasher> tmpl_table;
+alloc_pool rv32i_tmpl_pool;
+
 #ifdef XCOFF_DEBUGGING_INFO
 #include "xcoffout.h"		/* Needed for external data
 				   declarations for e.g. AIX 4.x.  */
@@ -2917,6 +2921,16 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,
 	/* Find the proper template for this insn.  */
 	templ = get_insn_template (insn_code_number, insn);
 
+	struct htab_rv32i_tmpl_entry key;
+	struct htab_rv32i_tmpl_entry **slot;
+	key.insn = insn;
+    slot = tmpl_table.find_slot (&key, INSERT);
+	if (!*slot) {
+      *slot = (struct htab_rv32i_tmpl_entry *) pool_alloc(rv32i_tmpl_pool);
+    }
+	(*slot)->insn = insn;
+    strcpy((*slot)->tmpl, templ);
+
 	/* If the C code returns 0, it means that it is a jump insn
 	   which follows a deleted test insn, and that test insn
 	   needs to be reinserted.  */
@@ -4413,6 +4427,11 @@ rest_of_handle_final (void)
   rtx x;
   const char *fnname;
 
+  // mtfd init
+  gcc_assert (!rv32i_tmpl_pool);
+  rv32i_tmpl_pool = create_alloc_pool ("rv32i_tmpl", sizeof (struct htab_rv32i_tmpl_entry), 1024);
+  tmpl_table.create(128);
+
   /* Get the function's name, as described by its RTL.  This may be
      different from the DECL_NAME name used in the source file.  */
 
diff --git a/gcc/mtfd.c b/gcc/mtfd.c
index 21c3163..87d26e1 100644
--- a/gcc/mtfd.c
+++ b/gcc/mtfd.c
@@ -2,96 +2,160 @@
  * implement of pass: pass_mtfd
  */
 
-#include "config.h"
-#include "system.h"
-#include "coretypes.h"
-#include "tree.h"
-#include "hash-table.h"
-#include "basic-block.h"
-#include "tree-ssa-alias.h"
-#include "internal-fn.h"
-#include "gimple-expr.h"
-#include "is-a.h"
-#include "gimple.h"
-#include "gimplify.h"
-#include "gimple-iterator.h"
-#include "calls.h"
-#include "varasm.h"
-#include "stor-layout.h"
-#include "tree-iterator.h"
-#include "cgraph.h"
-#include "stringpool.h"
-#include "tree-ssanames.h"
-#include "tree-pass.h"
-#include "asan.h"
-#include "gimple-pretty-print.h"
-#include "target.h"
-#include "expr.h"
-#include "optabs.h"
-#include "output.h"
-#include "langhooks.h"
-#include "alloc-pool.h"
-#include "cfgloop.h"
-#include "gimple-builder.h"
-#include "ubsan.h"
-#include "predict.h"
-#include "params.h"
-#include "print-rtl.h"
+#include "mtfd.h"
+
 static bool visit[1000];
+static int bb_cycle[1000][5];
+static struct bb_stack stack;
+static const int TABLE_LEN = 72;
+static hash_table <rv32i_insn_hasher> insn_table;
+static alloc_pool rv32i_insn_pool;
+
+typedef hash_table <rv32i_tmpl_hasher> rv32i_tmpl_hasher_type;
+extern hash_table <rv32i_tmpl_hasher> tmpl_table;
+extern alloc_pool rv32i_tmpl_pool;
+
+static const char rv32i_insn[TABLE_LEN][32] = {
+  "la","lla","move","mv","nop","li","not","neg","seqz","snez","sltz","sgtz","beqz","bnez","blez","bgez","bltz","bgtz","bgt","ble","bgtu","bleu","lui","auipc", "addi","slti","sltiu","xori","ori","andi","slli","srli","srai","add","sub","sll","slt","sltu","xor","srl","sra","or","and","jal","jalr","beq","bne","blt","bge","bltu","bgeu","j","jr","call","b","sb","sh","sw","lb","lh","lw","lbu","lhu","csrrw","csrrs","csrrc","csrrwi","csrrsi","csrrci","syscall","fence.i","fence"
+};
+static const int rv32i_insn_cycles[TABLE_LEN][5] = {
+  {3, 2, 2, 2, 2}, {2, 2, 2, 2, 2}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {4, 4, 4, 4, 4}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {3, 2, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {2, 1, 1, 1, 1}, {2, 1, 1, 1, 1}, {2, 1, 1, 1, 1}, {2, 1, 1, 1, 1}, {2, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {4, 2, 2, 1, 1}, {4, 2, 2, 1, 1}, {1, 1, 1, 1, 1}
+};
 
-static bool
-pass_mtfd_gate (void) {
-    // printf("[pass_mtfd] gated.\n");
-    return 1;
+static void init_hash_table () {
+  gcc_assert (!rv32i_insn_pool);
+  rv32i_insn_pool = create_alloc_pool ("rv32i_insn", sizeof (struct htab_rv32i_insn_entry), 128);
+  insn_table.create(TABLE_LEN);
+
+  struct htab_rv32i_insn_entry **slot;
+  struct htab_rv32i_insn_entry key;
+
+  for (int i = 0; i < TABLE_LEN; i++) {
+    strcpy(key.name, rv32i_insn[i]);
+    slot = insn_table.find_slot (&key, INSERT);
+    if (!*slot) {
+      *slot = (struct htab_rv32i_insn_entry *) pool_alloc(rv32i_insn_pool);
+    }
+    strcpy((*slot)->name, rv32i_insn[i]);
+    for (int j = 0; j < 5; j++) {
+      (*slot)->cycles[j] = rv32i_insn_cycles[i][j];
+    }
+  }
 }
 
-static int calculate_rtl_timing(rtx insn) {
-  
+static void destroy_hash_table () {
+  gcc_assert (rv32i_insn_pool);
+  insn_table.dispose();
+  free_alloc_pool (rv32i_insn_pool);
+  rv32i_insn_pool = NULL;
+
+// initiated in final.c
+  gcc_assert (rv32i_tmpl_pool);
+  tmpl_table.dispose();
+  free_alloc_pool (rv32i_tmpl_pool);
+  rv32i_tmpl_pool = NULL;
 }
 
-static void
-bb_traverse(basic_block bb) {
-    rtx tmp_rtx;
-    int seen = 0;
-    for (tmp_rtx = BB_HEAD(bb); BB_END(bb) != tmp_rtx; tmp_rtx = RTX_NEXT (tmp_rtx)) {
-      int is_insn = INSN_P(tmp_rtx);
-      printf("[pass_mtfd] [rtl code %d, insn: %d]", tmp_rtx->code, is_insn);
+static void scan_bb_timing() {
+  basic_block bb;
+  const_rtx in_rtx;
+
+  FOR_EACH_BB_FN (bb, cfun) {
+    // for (in_rtx = BB_HEAD(bb); BB_END(bb) != in_rtx; in_rtx = RTX_NEXT (in_rtx)) {
+      FOR_BB_INSNS(bb, in_rtx) {
+      int is_insn = INSN_P(in_rtx);
       if (is_insn) {
-        print_rtl_single(stdout, tmp_rtx);
+        printf("insn code : %d\t", INSN_CODE (in_rtx));
+        if (INSN_CODE (in_rtx) == ASM_INPUT || INSN_CODE (in_rtx) == ASM_OPERANDS) {
+          printf("[scan_bb_timing] asm_input/asm_operand ");
+          print_rtl_single(stdout, in_rtx);
+          // TODO
+        } else {
+          // Template matching 
+          struct htab_rv32i_tmpl_entry key;
+          struct htab_rv32i_tmpl_entry *entry;
+          key.insn = (rtx)in_rtx;
+
+          entry = tmpl_table.find(&key);
+          if (entry) {
+            if (entry->tmpl[0] == '#') {
+              printf("[scan_bb_timing]bad tmpl! (%s) --- ", entry->tmpl);
+              print_rtl_single(stdout, in_rtx);
+            } else {
+              struct htab_rv32i_insn_entry key2;
+              struct htab_rv32i_insn_entry *entry2;
+              int i = 0;
+              while ((entry->tmpl[i] <= 'z' && entry->tmpl[i] >= 'a') || entry->tmpl[i] == '.') {
+                key2.name[i] = entry->tmpl[i];
+                i++;
+              }
+              key2.name[i] = '\0';
+              entry2 = insn_table.find(&key2);
+              if (entry2) {
+                // Accumulate timing
+                printf("[scan_bb_timing]inst %s cycle: %d,%d,%d,%d,%d\n", key2.name,
+                      entry2->cycles[0], entry2->cycles[1], entry2->cycles[2],
+                      entry2->cycles[3], entry2->cycles[4]);
+                for (int j = 0; j < 5; j++) {
+                  bb_cycle[bb->index][j] += entry2->cycles[j];
+                }
+              } else {
+                printf("[scan_bb_timing]insn not found! key: %s--- ", key2.name);
+                print_rtl_single(stdout, in_rtx);
+              }
+            }
+          } else {
+            printf("[scan_bb_timing]tmpl not found! --- ");
+            print_rtl_single(stdout, in_rtx);
+          }
+        }
       } else {
-        printf("\n");
+        printf("[scan_bb_timing] cannot get insn code ");
+        print_rtl_single(stdout, in_rtx);
       }
-      // print_rtl_single(stdout, tmp_rtx);
-
-      // final_scan_insn(tmp_rtx, stdout, optimize, 0, &seen);
     }
-    // for (tmp_rtx = BB_HEAD(bb); tmp_rtx;) {
-    //   printf("[pass_mtfd] [rtl code %d]", tmp_rtx->code);
-    //   tmp_rtx = final_scan_insn(tmp_rtx, stdout, optimize, 0, &seen);
-    // }
+  }
 }
 
-static void
-dfs(basic_block bb) {
-  if (visit[bb->index] == 1)
-    return;
-  visit[bb->index] = 1;
-  bb_traverse(bb);
-  edge e;
-  edge_iterator ei;
-
-  FOR_EACH_EDGE (e, ei, bb->succs) {
-    dfs(e->dest);
+static void bb_all_path(basic_block start, basic_block end, int* max_cycle) {
+	visit[start->index] = 1;
+	stack.push(start);
+  vec<edge, va_gc>* succ = start->succs;
+  for (size_t i = 0; i < succ->length(); i++) {
+    basic_block bb_s = (*succ)[i]->dest;
+    if (bb_s == end) {
+      int sum_cycle[5] = {0};
+      for (int j = 0; j < stack.top + 1; j++) {
+        sum_cycle[0] += bb_cycle[stack.stack[j]->index][0];
+        sum_cycle[1] += bb_cycle[stack.stack[j]->index][1];
+        sum_cycle[2] += bb_cycle[stack.stack[j]->index][2];
+        sum_cycle[3] += bb_cycle[stack.stack[j]->index][3];
+        sum_cycle[4] += bb_cycle[stack.stack[j]->index][4];
+      }
+      max_cycle[0] = max_cycle[0] > sum_cycle[0] ? max_cycle[0] : sum_cycle[0];
+      max_cycle[1] = max_cycle[1] > sum_cycle[1] ? max_cycle[1] : sum_cycle[1];
+      max_cycle[2] = max_cycle[2] > sum_cycle[2] ? max_cycle[2] : sum_cycle[2];
+      max_cycle[3] = max_cycle[3] > sum_cycle[3] ? max_cycle[3] : sum_cycle[3];
+      max_cycle[4] = max_cycle[4] > sum_cycle[4] ? max_cycle[4] : sum_cycle[4];
+      stack.pop();
+      visit[start->index] = 0;
+      break;
+    }
+		if (!visit[bb_s->index]) {
+			bb_all_path(bb_s, end, max_cycle);
+		}
+    if (i == succ->length() - 1) {
+      stack.pop();
+      visit[start->index] = 0;
+    }
   }
 }
 
 static unsigned int
 pass_mtfd_excute (void) {
     basic_block bb;
-    // printf("[pass_mtfd] enter excuted.\n");
-
-    // rtl print
     const_rtx tmp_rtx;
+    // printf("[pass_mtfd] enter excuted.\n");
 
     // FOR_EACH_BB_FN (bb, cfun) {
     //   printf("bb: %p\n", bb);
@@ -107,23 +171,50 @@ pass_mtfd_excute (void) {
     //       print_rtl_single(stdout, tmp_rtx);
     //     }
     //   }
-
     // loop l;
     // FOR_EACH_LOOP(l, ) {
-
     // }
     // flow_loops_dump(stdout, NULL, 0);
     // cfg traverse
     // bb = BASIC_BLOCK_FOR_FN(cfun, 0);
-    bb = ENTRY_BLOCK_PTR_FOR_FN(cfun);
-    memset(visit, 0, sizeof(visit));
-    dfs(bb);
-    // printf("[pass_mtfd] leave excuted.\n");
-        // flow_loops_dump(stdout, NULL, 1);
 
+    init_hash_table();
+
+    for (rv32i_tmpl_hasher_type::iterator iter = tmpl_table.begin ();
+          iter != tmpl_table.end ();
+          ++iter)
+      printf("[insn tmpl] insn:%p tmpl:%s\n", (*iter).insn, (*iter).tmpl);
+
+    memset(bb_cycle, 0, sizeof(bb_cycle));
+    scan_bb_timing();
+
+    FOR_EACH_BB_FN (bb, cfun) {
+      printf("basic block %3d: cycle[0]=%d\n", bb->index, bb_cycle[bb->index][0]);
+      printf("                 cycle[1]=%d\n", bb_cycle[bb->index][1]);
+      printf("                 cycle[2]=%d\n", bb_cycle[bb->index][2]);
+      printf("                 cycle[3]=%d\n", bb_cycle[bb->index][3]);
+      printf("                 cycle[4]=%d\n", bb_cycle[bb->index][4]);
+      printf("\n");
+    }
+
+    // basic_block mt, fd;
+    // memset(visit, 0, sizeof(visit));
+    // find_mtfd(&mt, &fd);
+
+    // stack.clear();
+    // int max_cycle[5] = {0};
+    // bb_all_path(mt, fd, max_cycle);
+
+    destroy_hash_table();
     return 0;
 }
 
+static bool
+pass_mtfd_gate (void) {
+    // printf("[pass_mtfd] gated.\n");
+    return 1;
+}
+
 namespace {
 
 const pass_data pass_data_mtfd =
diff --git a/gcc/mtfd.h b/gcc/mtfd.h
new file mode 100644
index 0000000..ec430b8
--- /dev/null
+++ b/gcc/mtfd.h
@@ -0,0 +1,145 @@
+#ifndef GCC_MTFD_H
+#define GCC_MTFD_H
+
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "hash-table.h"
+#include "basic-block.h"
+#include "tree-ssa-alias.h"
+#include "internal-fn.h"
+#include "gimple-expr.h"
+#include "is-a.h"
+#include "gimple.h"
+#include "gimplify.h"
+#include "gimple-iterator.h"
+#include "calls.h"
+#include "varasm.h"
+#include "stor-layout.h"
+#include "tree-iterator.h"
+#include "cgraph.h"
+#include "stringpool.h"
+#include "tree-ssanames.h"
+#include "tree-pass.h"
+#include "asan.h"
+#include "gimple-pretty-print.h"
+#include "target.h"
+#include "expr.h"
+#include "optabs.h"
+#include "output.h"
+#include "langhooks.h"
+#include "alloc-pool.h"
+#include "cfgloop.h"
+#include "gimple-builder.h"
+#include "ubsan.h"
+#include "predict.h"
+#include "params.h"
+#include "print-rtl.h"
+#include "rtl.h"
+#include "config/riscv/riscv-protos.h"
+
+
+struct htab_rv32i_insn_entry
+{
+  char name[64];
+  int cycles[5];
+};
+
+struct rv32i_insn_hasher : typed_noop_remove <htab_rv32i_insn_entry>
+{
+  typedef htab_rv32i_insn_entry value_type;
+  typedef htab_rv32i_insn_entry compare_type;
+  static inline hashval_t hash (const value_type *);
+  static inline bool equal (const value_type *existing,
+			    const compare_type * candidate);
+};
+
+inline hashval_t
+rv32i_insn_hasher::hash (const value_type *data)
+{
+  const char * p = data->name;
+  return strlen(p) * 26 + (*p);
+}
+
+inline bool
+rv32i_insn_hasher::equal (const value_type *data, const compare_type *data2)
+{
+  // str include
+//   return strstr(data->name, data2->name) != NULL || strstr(data2->name, data->name);
+  return strcmp(data->name, data2->name) == 0;
+}
+
+
+struct htab_rv32i_tmpl_entry
+{
+  rtx insn;
+  char tmpl[64];
+};
+
+struct rv32i_tmpl_hasher : typed_noop_remove <htab_rv32i_tmpl_entry>
+{
+  typedef htab_rv32i_tmpl_entry value_type;
+  typedef htab_rv32i_tmpl_entry compare_type;
+  static inline hashval_t hash (const value_type *);
+  static inline bool equal (const value_type *existing,
+			    const compare_type * candidate);
+};
+
+inline hashval_t
+rv32i_tmpl_hasher::hash (const value_type *data)
+{
+    return (hashval_t) (((intptr_t)data->insn) >> 3);
+}
+
+inline bool
+rv32i_tmpl_hasher::equal (const value_type *data, const compare_type *data2)
+{
+  return data->insn == data2->insn;
+}
+
+struct bb_stack {
+    int MAXSIZE;
+    basic_block stack[1000];
+    int top;     
+    bb_stack() {
+        top = -1;
+        MAXSIZE = 1000;
+    }
+    void clear() {
+        top = -1;
+    }
+    int isempty() {
+        if (top == -1)
+            return 1;
+        return 0;
+    }
+    int isfull() {
+        if(top == MAXSIZE)
+            return 1;
+        return 0;
+    }
+    basic_block pop() {
+        basic_block data;
+        if(!isempty()) {
+            data = stack[top];
+            top = top - 1;   
+            return data;
+        } else {
+            printf("Could not retrieve data, Stack is empty.\n");
+            return NULL;
+        }
+    }
+    int push(basic_block data) {
+        if(!isfull()) {
+            top = top + 1;   
+            stack[top] = data;
+        } else {
+            printf("Could not insert data, Stack is full.\n");
+            return 0;
+        }
+        return 1;
+    }
+};
+
+#endif
\ No newline at end of file
diff --git a/gcc/passes.def b/gcc/passes.def
index 718e230..572dbd9 100644
--- a/gcc/passes.def
+++ b/gcc/passes.def
@@ -410,8 +410,8 @@ along with GCC; see the file COPYING3.  If not see
 	  NEXT_PASS (pass_shorten_branches);
 	  NEXT_PASS (pass_set_nothrow_function_flags);
 	  NEXT_PASS (pass_dwarf2_frame);
-     NEXT_PASS (pass_mtfd);
 	  NEXT_PASS (pass_final);
+     NEXT_PASS (pass_mtfd);
       POP_INSERT_PASSES ()
       NEXT_PASS (pass_df_finish);
   POP_INSERT_PASSES ()
-- 
2.7.4

